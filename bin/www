#!/usr/bin/env node

/*
 ############################################################################
 ############################### GPL III ####################################
 ############################################################################
 *                         Copyright 2019 CRS4â€¨                              *
 *       This file is part of CRS4 Microservice Core - IoT (CMC-IoT).       *
 *                                                                          *
 *     CMC-IoT is free software: you can redistribute it and/or modify      *
 *   it under the terms of the GNU General Public License as published by   *
 *    the Free Software Foundation, either version 3 of the License, or     *
 *                 (at your option) any later version.                      *
 *                                                                          *
 *    CMC-IoT is distributed in the hope that it will be useful,            *
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *            GNU General Public License for more details.                  *
 *                                                                          *
 *     You should have received a copy of the GNU General Public License    *
 *     along with CMC-IoT.  If not, see <http://www.gnu.org/licenses/>.     *
 ############################################################################
 */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cmc-iot:server');
var http = require('http');
var conf = require('propertiesmanager').conf;
var db = require("../connectionsHandler/mongooseConnection");
var redisConnection=require("../connectionsHandler/redisConnection");
var redisPushNotificationConnection=require("../connectionsHandler/redisPushNotificationConnection");

var setupEnvironmentDefaults=require('./environmentDefaults/setupDefault');
var errorHandler=require('../routes/utility/error');
var server;



function disconnect(){
    db.disconnect(function (err, result) {
        console.log("Exiting App...");
        if (err) {
            console.log('Unable to disconnect from database');
        }
        else {
            console.log('Disconnected from database');
        }
        redisConnection.disconnect();
        redisPushNotificationConnection.disconnect();
        process.exit(1);
    });
}





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            disconnect();
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            disconnect();
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    // set env in config
    if (process.env['NODE_ENV'] === 'dev')
        conf.env='dev';
    else
        conf.env='production';


    debug('Listening on ' + bind);

    console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    console.log('!!     Listening on ' + bind + '    !!');
    console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
}

function runServer(){
    process.on('SIGINT', function (code) {
        disconnect();
    });

    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || conf.microserviceConf.port || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

setupEnvironmentDefaults.setupDefaults(function(err,cmc_IotDismissedID){
    try {
        if(!err){
            conf.cmcIoTThingsOwner._id=cmc_IotDismissedID;


            // Connect to db: Open and initialise connection
            console.log("Waiting for DB connection ....");
            db.connect(function(err){
                if(err){
                    console.log("Unable to connect to DB, err:" +err);
                    errorHandler.printErrorLog("App can not start due to " + err );
                }
                else{
                    console.log("Connected to DB");
                    if(conf.redisCache.must) {
                        console.log("Waiting for Redis connection ....");
                        redisConnection.connect(function(err,logmsg){
                            if (err) {
                                console.log('Unable to connect to Redis, err:' + err);
                                db.disconnect();
                                errorHandler.printErrorLog("App can not start due to " + err);
                            }else {
                                console.log(logmsg);

                                if(conf.redisPushNotification.must) {
                                    console.log("Waiting for Redis Push MNotification connection ....");
                                    redisPushNotificationConnection.connect(function(err,logmsg){
                                        if (err) {
                                            console.log('Unable to connect to Redis Push MNotification, err:' + err);
                                            db.disconnect();
                                            redisConnection.disconnect();
                                            errorHandler.printErrorLog("App can not start due to Redis Push MNotification" + err);
                                        }else {
                                            console.log(logmsg);
                                            runServer();
                                        }
                                    });
                                }
                                else{
                                    redisPushNotificationConnection.connect();
                                    runServer();
                                }

                            }
                        });
                    } else{
                        redisConnection.connect();
                        if(conf.redisPushNotification.must) {
                            console.log("Waiting for Redis Push MNotification connection ....");
                            redisPushNotificationConnection.connect(function(err,logmsg){
                                if (err) {
                                    console.log('Unable to connect to Redis Push MNotification, err:' + err);
                                    db.disconnect();
                                    errorHandler.printErrorLog("App can not start due to Redis Push MNotification " + err);
                                }else {
                                    console.log(logmsg);
                                    runServer();
                                }
                            });
                        }
                        else{
                            redisConnection.connect();
                            redisPushNotificationConnection.connect();
                            runServer();
                        }
                    }
                }
            });
        } else{
            errorHandler.printErrorLog("App can not start due to " + err );
        }
    }catch (ex) {
        errorHandler.printErrorLog("App can not start due to " + ex );
    }

});



